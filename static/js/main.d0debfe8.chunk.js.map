{"version":3,"sources":["logo.svg","Flex.js","FlexViewHeight.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Flex","className","FlexViewHeight","Default","props","src","logo","alt","href","target","rel","onClick","Sticky","id","App","useState","view","setView","num","Boolean","window","location","hostname","match","vh","innerHeight","document","documentElement","style","setProperty","addEventListener","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,kC,uLCEpC,SAASC,IACZ,OACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,cACX,2BAAG,qCACC,6BACA,6BAFJ,uBAIJ,yBAAKA,UAAU,eACX,2BACI,sCADJ,4BAKJ,yBAAKA,UAAU,cACX,2BAAG,qCAAH,qBCfT,SAASC,IACZ,OACI,yBAAKD,UAAU,kBACX,yBAAKA,UAAU,cACX,2BAAG,qCACC,6BACA,6BAFJ,uBAIJ,yBAAKA,UAAU,eACX,2BACI,sCADJ,4BAKJ,yBAAKA,UAAU,cACX,2BAAG,qCAAH,qBCVhB,SAASE,EAAQC,GACb,OACI,yBAAKH,UAAU,OACX,4BAAQA,UAAU,cACd,yBAAKI,IAAKC,IAAML,UAAU,WAAWM,IAAI,SACzC,mCACS,4CADT,wBAGA,uBACIN,UAAU,WACVO,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJR,gBASJ,4BAAQT,UAAW,WAAYU,QAAS,kBAAMP,EAAMO,QAAQ,KAA5D,QACA,4BAAQV,UAAW,WAAYU,QAAS,kBAAMP,EAAMO,QAAQ,KAA5D,kBACA,4BAAQV,UAAW,WAAYU,QAAS,kBAAMP,EAAMO,QAAQ,KAA5D,WAKZ,SAASC,EAAOR,GACZ,OACI,6BACI,yBAAKS,GAAG,SAASZ,UAAU,OACvB,2BAAG,qCACC,6BACA,6BAFJ,uBAIJ,yBAAKY,GAAG,UAAUZ,UAAU,OACxB,2BACI,sCADJ,4BAKJ,yBAAKY,GAAG,SAASZ,UAAU,OACvB,2BAAG,qCAAH,qBA0BDa,MAnBf,WAAgB,IAAD,EACaC,mBAAS,GADtB,mBACJC,EADI,KACEC,EADF,KAGX,OAAa,IAATD,EACO,kBAACb,EAAD,CAASQ,QAAS,SAACO,GAAD,OAASD,EAAQC,MAE5B,IAATF,EACE,kBAAChB,EAAD,MAEO,IAATgB,EACE,kBAACd,EAAD,MAEO,IAATc,EACE,kBAACJ,EAAD,MAGJ,MCzDSO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAIC,EAA0B,IAArBJ,OAAOK,YAEhBC,SAASC,gBAAgBC,MAAMC,YAAY,OAA3C,UAAsDL,EAAtD,OAEAJ,OAAOU,iBAAiB,UAAU,WAE9B,IAAIN,EAA0B,IAArBJ,OAAOK,YAChBC,SAASC,gBAAgBC,MAAMC,YAAY,OAA3C,UAAsDL,EAAtD,UAGJO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFP,SAASQ,eAAe,SD8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d0debfe8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nexport function Flex() {\n    return (\n        <div className=\"box\">\n            <div className=\"row header\">\n                <p><b>header</b>\n                    <br/>\n                    <br/>(sized to content)</p>\n            </div>\n            <div className=\"row content\">\n                <p>\n                    <b>content</b>\n                    (fills remaining space)\n                </p>\n            </div>\n            <div className=\"row footer\">\n                <p><b>footer</b> (fixed height)</p>\n            </div>\n        </div>\n    )\n}","import React from 'react';\n\nexport function FlexViewHeight() {\n    return (\n        <div className=\"box my-element\">\n            <div className=\"row header\">\n                <p><b>header</b>\n                    <br/>\n                    <br/>(sized to content)</p>\n            </div>\n            <div className=\"row content\">\n                <p>\n                    <b>content</b>\n                    (fills remaining space)\n                </p>\n            </div>\n            <div className=\"row footer\">\n                <p><b>footer</b> (fixed height)</p>\n            </div>\n        </div>\n    )\n}","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Flex} from \"./Flex\";\nimport {FlexViewHeight} from \"./FlexViewHeight\";\n\n\nfunction Default(props) {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <p>\n                    Edit <code>src/App.js</code> and save to reload.\n                </p>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n            </header>\n            <button className={\"myButton\"} onClick={() => props.onClick(1)}>Flex</button>\n            <button className={\"myButton\"} onClick={() => props.onClick(2)}>FlexViewHeight</button>\n            <button className={\"myButton\"} onClick={() => props.onClick(3)}>Sticky</button>\n        </div>\n    )\n}\n\nfunction Sticky(props) {\n    return (\n        <div>\n            <div id=\"header\" className=\"row\">\n                <p><b>header</b>\n                    <br/>\n                    <br/>(sized to content)</p>\n            </div>\n            <div id=\"content\" className=\"row\">\n                <p>\n                    <b>content</b>\n                    (fills remaining space)\n                </p>\n            </div>\n            <div id=\"footer\" className=\"row\">\n                <p><b>footer</b> (fixed height)</p>\n            </div>\n        </div>\n\n    )\n}\n\nfunction App() {\n    const [view, setView] = useState(0);\n\n    if (view === 0){\n        return <Default onClick={(num) => setView(num)}/>\n    }\n    else if (view === 1) {\n        return <Flex/>\n    }\n    else if (view === 2) {\n        return <FlexViewHeight/>\n    }\n    else if (view === 3) {\n        return <Sticky/>\n    }\n\n    return null;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// First we get the viewport height and we multiple it by 1% to get a value for a vh unit\nlet vh = window.innerHeight * 0.01;\n// Then we set the value in the --vh custom property to the root of the document\ndocument.documentElement.style.setProperty('--vh', `${vh}px`);\n\nwindow.addEventListener('resize', () => {\n    // We execute the same script as before\n    let vh = window.innerHeight * 0.01;\n    document.documentElement.style.setProperty('--vh', `${vh}px`);\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}